===== ?åÏùº: %~dpnxF ===== 
namespace _02_Scripts.Class
{
    public enum ClassEnum
    {
        Beginner = 0,
        Warrior = 1,
        Archer = 2,
        Mage = 3,
        Thief = 4
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using System;
using System.Collections.Generic;

public static class EventBus
{
    private static readonly Dictionary<Type, Delegate> eventDict = new();

    public static void Subscribe<T>(Action<T> handler)
    {
        if (eventDict.TryGetValue(typeof(T), out var existingHandler))
        {
            eventDict[typeof(T)] = Delegate.Combine(existingHandler, handler);
        }
        else
        {
            eventDict[typeof(T)] = handler;
        }
    }

    public static void Unsubscribe<T>(Action<T> handler)
    {
        if (eventDict.TryGetValue(typeof(T), out var existingHandler))
        {
            var newHandler = Delegate.Remove(existingHandler, handler);
            if (newHandler == null) eventDict.Remove(typeof(T));
            else eventDict[typeof(T)] = newHandler;
        }
    }

    public static void Raise<T>(T eventData)
    {
        if (eventDict.TryGetValue(typeof(T), out var handler))
        {
            ((Action<T>)handler)?.Invoke(eventData);
        }
    }

    public static void ClearAll() => eventDict.Clear(); // ?Îì≠ÎÄ°
}
 
===== ?åÏùº: %~dpnxF ===== 
public struct OnLogin {}
 
===== ?åÏùº: %~dpnxF ===== 
using System;

namespace _02_Scripts.Item
{
    public class ItemData
    {
        public int user_seq;
        public int slot_index;
        public string item_uid;
        public string item_name;
        public string item_description;
        public string item_icon;
        public int item_seq;
        public int quantity;
        public DateTime? acquired_at;
        public DateTime? expired_at;
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
namespace _02_Scripts.Item
{
    [System.Serializable]
    public class ItemMasterData
    {
        public int seq;
        public string display_name;
        public string description;
        public string icon;    
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using System.Collections.Generic;

namespace _02_Scripts.Item
{
    [System.Serializable]
    public class ItemMasterDataList
    {
        public List<ItemMasterData> items;
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using System.Collections.Generic;
using _02_Scripts.Item;
using Newtonsoft.Json;
using UnityEngine;

public class ItemMasterLoader : MonoBehaviour
{
    public static Dictionary<int, ItemMasterData> itemMasterDict = new();

    void Awake()
    {
        LoadItemMaster();
    }

    private void LoadItemMaster()
    {
        TextAsset jsonText = Resources.Load<TextAsset>("Data/itemMasterData");
        if (jsonText == null)
        {
            Debug.LogError("itemMasterData.json ?ÎöØÏî™??Ôß°Ïñ†Ïì£ ???ÎÜÅÎíø?ÎçàÎñé.");
            return;
        }

        List<ItemMasterData> items = JsonConvert.DeserializeObject<List<ItemMasterData>>(jsonText.text);
        foreach (var item in items)
        {
            itemMasterDict[item.seq] = item;
        }
    }

}
 
===== ?åÏùº: %~dpnxF ===== 
public class LoginData
{
    public string userId;
    public string password;

    public LoginData(string id, string pw)
    {
        userId = id;
        password = pw;
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
    using System.Collections;
using System.Collections.Generic;
using System.Text;
using _02_Scripts.Player;
using Newtonsoft.Json;
using TMPro;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.SceneManagement;

public class LoginManager : MonoBehaviour
{
    [SerializeField] private TMP_InputField idInputField;
    [SerializeField] private TMP_InputField pwInputField;
    
    private string loginUrl = "http://localhost:3000/api/login/onLogin";
    
    public void OnLoginButtonPressed()
    {
        string userId = idInputField.text;
        string password = pwInputField.text;

        Debug.Log($"Êø°ÏíìÎ†á???ÏíïÎ£Ñ: ID={userId}, PW={password}");
        StartCoroutine(SendLoginRequest(userId, password));
    }
    
    private IEnumerator SendLoginRequest(string userId, string password)
    {
        string HashPass = ConvertHash.StringToHash(password);
        // JSON ?Î∫§Îñá?Ïá∞Ï§à ?Íæ©ÎÑö???Í≥óÏî†???ÏïπÍΩ¶
        string jsonData = JsonConvert.SerializeObject(new LoginData(userId, HashPass));

        // ?Î∂øÍªå Â™õÏïπÍªú ?ÏïπÍΩ¶
        UnityWebRequest request = new UnityWebRequest(loginUrl, "POST");
        byte[] jsonToSend = new UTF8Encoding().GetBytes(jsonData);
        request.uploadHandler = new UploadHandlerRaw(jsonToSend);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "application/json");

        // ?Î∂øÍªå ?Íæ©ÎÑö
        yield return request.SendWebRequest();

        // ?Î¨êÎñü Ôß£ÏÑé‚îÅ
        if (request.result == UnityWebRequest.Result.Success)
        {
            LoginResponse response = JsonConvert.DeserializeObject<LoginResponse>(request.downloadHandler.text);
            PlayerData loginData = response.data;
            login(loginData);
        }
        else
        {
            Debug.LogError("?ÏíïÏæ≠ ?Î∂øÍªå ?„ÖΩÎô£: " + request.error);
        }
    }

    private void login(PlayerData loginData)
    {
        Debug.Log(loginData.seq);
        // PlayerManager ?ÏïπÍΩ¶
        GameObject obj = new GameObject("PlayerManager");
        PlayerManager manager = obj.AddComponent<PlayerManager>();
        manager.Init(loginData);

        // ???ÎåÄÎ£û
        SceneManager.LoadScene("MainScene");
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using _02_Scripts.Player;

public class LoginResponse
{
    public string message { get; set; }
    public PlayerData data { get; set; }
}
 
===== ?åÏùº: %~dpnxF ===== 
using UnityEngine;

namespace _02_Scripts.Login
{
    public class LoginUIManager : MonoBehaviour
    {
        [SerializeField] private GameObject LoginPopup;

        public void Start()
        {
            LoginPopup.SetActive(false);
        }

        public void ShowLoginPopup()
        {
            LoginPopup.SetActive(true);
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using System.Collections;
using System.Text;
using _02_Scripts.Player;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Networking;

namespace _02_Scripts.Monster.Drop
{
    public class Drop
    {
        private string dropUrl = "http://localhost:3000/api/drop/drop"; 
        
        private IEnumerator SendDropRequest(int monsterId, int userId, float dropRate)
        {
            string jsonData = JsonConvert.SerializeObject(new DropData(monsterId, userId, dropRate));

            UnityWebRequest request = new UnityWebRequest(dropUrl, "POST");
            byte[] jsonToSend = new UTF8Encoding().GetBytes(jsonData);
            request.uploadHandler = new UploadHandlerRaw(jsonToSend);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("Content-Type", "application/json");

            yield return request.SendWebRequest();

            if (request.result == UnityWebRequest.Result.Success)
            {
            }
            else
            {
                Debug.LogError("?ÏíïÏæ≠ ?Î∂øÍªå ?„ÖΩÎô£: " + request.error);
            }
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
namespace _02_Scripts.Monster.Drop
{
    public class DropData
    {
        public int monsterId;
        public int userSeq;
        public float dropRateModifier;

        public DropData(int monsterId, int userSeq, float dropRateModifier)
        {
            this.monsterId = monsterId;
            this.userSeq = userSeq;
            this.dropRateModifier = dropRateModifier;
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
namespace _02_Scripts.Player
{
    public class PlayerData
    {
        public string name;
        public string id;
        public int seq;
        public int gold;
        public int level;
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using System.Collections;
using System.Text;
using _02_Scripts.Player;
using UnityEngine;
using UnityEngine.Networking;

public class PlayerManager : Singleton<PlayerManager>
{
    public PlayerData playerData;
    public PlayerStatData playerStatData;
    public void Init(PlayerData data)
    {
        playerData = data;
        playerStatData = new PlayerStatData();
        Debug.Log($"Êø°ÏíìÎ†á?Î™ÉÎßÇ ?Ï¢é?: {data.name}");
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using System.Collections.Generic;
using _02_Scripts.Player.Status;

[System.Serializable]
public class PlayerStatData
{
    public int user_seq;
    public List<StatData> stats;
}
 
===== ?åÏùº: %~dpnxF ===== 
using System;
using System.Collections;
using System.Collections.Generic;
using _02_Scripts.Item;
using _02_Scripts.Player.Inventory.Request;
using UnityEngine;
using UnityEngine.Networking;
using Newtonsoft.Json;

namespace _02_Scripts.Player.Inventory
{
    public class InventoryManager : MonoBehaviour
    {
        [SerializeField]
        private InventoryUIManager inventoryUIManager;
        
        public List<ItemData> inventoryItems = new List<ItemData>();

        public void Start()
        {
            StartCoroutine(GetInventory(PlayerManager.Instance.playerData.seq));
        }

        // private IEnumerator RunInventorySequence()
        // { ?ÎöØÎí™?Î™ÑÏäú ËÇÑÎ∂æÎ±∂
        //     yield return StartCoroutine(AddInventory(1, 1));
        //     yield return StartCoroutine(AddInventory(2, 1));
        //     yield return StartCoroutine(AddInventory(3, 1));
        //     yield return StartCoroutine(AddInventory(4, 1));
        //     yield return StartCoroutine(AddInventory(1, 1));
        //     yield return StartCoroutine(AddInventory(2, 1));
        //     yield return StartCoroutine(AddInventory(3, 1));
        //     yield return StartCoroutine(AddInventory(4, 1));
        // }

        public IEnumerator AddInventory(int itemSeq, int userSeq)
        {
            string url = "http://localhost:3000/api/inventory/Add";

            InventoryRequest requestData = new InventoryRequest
            {
                itemSeq = itemSeq,
                userSeq = userSeq
            };

            string jsonData = JsonConvert.SerializeObject(requestData);
            
            UnityWebRequest request = new UnityWebRequest(url, "POST");
            byte[] bodyRaw = System.Text.Encoding.UTF8.GetBytes(jsonData);

            request.uploadHandler = new UploadHandlerRaw(bodyRaw);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("Content-Type", "application/json");

            yield return request.SendWebRequest();

            if (request.result == UnityWebRequest.Result.Success)
            {
                Debug.Log("Áï∞Î∂Ω? ?ÍπÉÎÇ¨: " + request.downloadHandler.text);
            }
            else
            {
                Debug.LogError("?Î®ÆÏú≠ Ë´õÏíñÍπÆ: " + request.error);
            }
        }

        public IEnumerator GetInventory(int userSeq)
        {
            Debug.Log(userSeq);
            string url = "http://localhost:3000/api/inventory/Get";

            InventoryRequest requestData = new InventoryRequest
            {
                userSeq = userSeq
            };

            string jsonData = JsonUtility.ToJson(requestData);

            UnityWebRequest request = new UnityWebRequest(url, "POST");
            byte[] bodyRaw = System.Text.Encoding.UTF8.GetBytes(jsonData);

            request.uploadHandler = new UploadHandlerRaw(bodyRaw);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("Content-Type", "application/json");

            yield return request.SendWebRequest();

            if (request.result == UnityWebRequest.Result.Success)
            {
                string json = request.downloadHandler.text;
                Debug.Log("?ÏíïÏæ≠ ?Î¨êÎñü: " + json);

                ParsingInventory(JsonConvert.DeserializeObject<List<ItemData>>(json)); 
                Debug.Log($"Ë´õÏèÜ? ?Íæ©Ïî†??Â™õÏíñÎãî: {inventoryItems.Count}");
                inventoryUIManager.Init(inventoryItems);
            }
            else
            {
                Debug.LogError("?Î®ÆÏú≠ Ë´õÏíñÍπÆ: " + request.error);
            }
        }

        private void ParsingInventory(List<ItemData> itemList)
        {
            inventoryItems = new List<ItemData>();
            foreach (var item in itemList)
            {
                item.item_description = ItemMasterLoader.itemMasterDict[item.item_seq].description;
                item.item_icon = ItemMasterLoader.itemMasterDict[item.item_seq].icon;
                item.item_name = ItemMasterLoader.itemMasterDict[item.item_seq].display_name;
                inventoryItems.Add(item);
            }
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using _02_Scripts.Item;
using UnityEngine;

namespace _02_Scripts.Player.Inventory
{
    public class InventorySlotManager : MonoBehaviour
    {
        private ItemData itemData;

        public void SetItemData(ItemData itemData)
        {
            this.itemData = itemData;
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using _02_Scripts.Item;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using Utill;

namespace _02_Scripts.Player.Inventory
{
    public class InventorySlotUIManager : MonoBehaviour
    {
        [SerializeField] 
        private Image itemIcon;
        [SerializeField] 
        private TMP_Text amountText;

        public void SetItem(ItemData itemData)
        {
            Sprite icon = Resources.Load<Sprite>($"Icon/{itemData.item_icon}");
            itemIcon.sprite = icon;
            amountText.text = itemData.quantity > 1 ? itemData.quantity.ToString() : "";
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using System.Collections.Generic;
using _02_Scripts.Item;
using UnityEditor;
using UnityEngine;

namespace _02_Scripts.Player.Inventory
{
    public class InventoryUIManager : MonoBehaviour
    {
        [SerializeField] private GameObject inventoryPanel;
        [SerializeField] private GameObject content;
        [SerializeField] private GameObject SlotManager;
        [SerializeField] private GameObject inventoryItemPrefab;
        private InventorySlotUIManager slotUI;
        private InventorySlotManager slotManager;

        public void Init(List<ItemData> items)
        {
            SetItemList(items);
            inventoryPanel.SetActive(false);
        }

        public void SetItemList(List<ItemData> items)
        {
            foreach (ItemData item in items)
            {
                GameObject instance = Instantiate(inventoryItemPrefab, content.transform);
                InventorySlotUIManager slotUI = instance.GetComponent<InventorySlotUIManager>();
                InventorySlotManager slotManager = instance.GetComponent<InventorySlotManager>();
                if (slotUI != null)
                {
                    slotUI.SetItem(item);
                }

                if (slotManager != null)
                {
                    slotManager.SetItemData(item);
                }
            }
        }

        public void ShowInventory()
        {
            inventoryPanel.SetActive(true);
        }

        public void HideInventory()
        {
            inventoryPanel.SetActive(false);
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
namespace _02_Scripts.Player.Inventory.Request
{
    [System.Serializable]
    public class InventoryRequest
    {
        public int itemSeq;
        public int userSeq;
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
namespace _02_Scripts.Player.Status
{
    [System.Serializable]
    public class StatData
    {
        public int stat_id;
        public int stat_value;   // ?ÏÑèÌäÇ
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
namespace _02_Scripts.Player.Status
{
    [System.Serializable]
    public class StatMasterData
    {
        public int id;
        public string name;
        public string description;
        public string icon;
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using System.Collections.Generic;
using _02_Scripts.Player.Status;

[System.Serializable]
public class StatMasterDataList
{
    public List<StatMasterData> stats;
}
 
===== ?åÏùº: %~dpnxF ===== 
using System.Collections.Generic;
using _02_Scripts.Player.Status;
using Newtonsoft.Json;
using UnityEngine;

public class StatMasterLoader : MonoBehaviour
{
    public static Dictionary<int, StatMasterData> statMasterDict = new();

    void Awake()
    {
        LoadStatMaster();
    }

    private void LoadStatMaster()
    {
        TextAsset jsonText = Resources.Load<TextAsset>("Data/statMasterData");
        if (jsonText == null)
        {
            Debug.LogError("statMasterData.json ?ÎöØÏî™??Ôß°Ïñ†Ïì£ ???ÎÜÅÎíø?ÎçàÎñé.");
            return;
        }

        List<StatMasterData> stats = JsonConvert.DeserializeObject<List<StatMasterData>>(jsonText.text);
        foreach (var stat in stats)
        {
            statMasterDict[stat.id] = stat;
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using System.Collections;
using System.Collections.Generic;
using _02_Scripts.Item;
using _02_Scripts.Player.Inventory.Request;
using _02_Scripts.Player.Status.Request;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Networking;

namespace _02_Scripts.Player.Status
{
    public class StatusManager : MonoBehaviour
    {
        
        [SerializeField]
        private StatusUIManager statusUIManager;
        public void Start()
        {
            StartCoroutine(GetStat(PlayerManager.Instance.playerData.seq));
        }
        
        public IEnumerator GetStat(int userSeq)
        {
            Debug.Log(userSeq);
            string url = "http://localhost:3000/api/status/Get";

            StatusRequest requestData = new StatusRequest
            {
                userSeq = userSeq
            };

            string jsonData = JsonUtility.ToJson(requestData);

            UnityWebRequest request = new UnityWebRequest(url, "POST");
            byte[] bodyRaw = System.Text.Encoding.UTF8.GetBytes(jsonData);

            request.uploadHandler = new UploadHandlerRaw(bodyRaw);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("Content-Type", "application/json");

            yield return request.SendWebRequest();

            if (request.result == UnityWebRequest.Result.Success)
            {
                string json = request.downloadHandler.text;
                Debug.Log("?ÏíïÏæ≠ ?Î¨êÎñü: " + json);

                PlayerManager.Instance.playerStatData = JsonConvert.DeserializeObject<PlayerStatData>(json);
                statusUIManager.MakeStatusRow();
            }
            else
            {
                Debug.LogError("?Î®ÆÏú≠ Ë´õÏíñÍπÆ: " + request.error);
            }
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using TMPro;
using UnityEngine;
using UnityEngine.UI;

namespace _02_Scripts.Player.Status
{
    public class StatusSlotUIManager : MonoBehaviour
    {
        [SerializeField]
        private Image Icon;

        [SerializeField]
        private TMP_Text StatName;

        [SerializeField]
        private TMP_Text StatValue;

        public void SetSlot(StatData statData)
        {
            StatMasterLoader.statMasterDict.TryGetValue(statData.stat_id, out var master);
            Sprite icon = Resources.Load<Sprite>($"Icon/{master.icon}");

            Icon.sprite = icon;
            StatName.text = master.name;
            StatValue.text = statData.stat_value.ToString();
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using UnityEngine;

namespace _02_Scripts.Player.Status
{
    public class StatusUIManager : MonoBehaviour
    {
        [SerializeField]
        private GameObject statusPanel;
        [SerializeField]
        private GameObject statRowSlotPrefab;
        [SerializeField]
        private GameObject content;

        public void MakeStatusRow()
        {
            PlayerStatData playerStatData = PlayerManager.Instance.playerStatData;
            foreach (var stat in playerStatData.stats)
            {
                GameObject instance = Instantiate(statRowSlotPrefab, content.transform);
                StatusSlotUIManager slotUI = instance.GetComponent<StatusSlotUIManager>();
                slotUI.SetSlot(stat);
            }
        }

        public void ShowStatusPanel()
        {
            statusPanel.SetActive(true);
        }

        public void HideStatusPanel()
        {
            statusPanel.SetActive(false);
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
namespace _02_Scripts.Player.Status.Request
{
    public class StatusRequest
    {
        public int userSeq;
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using TMPro;
using UnityEngine;
using UnityEngine.PlayerLoop;
using UnityEngine.UI;

namespace _02_Scripts.UI
{
    public class CharacterUIManager
    {
        [SerializeField] private TMP_Text nameText;
        [SerializeField] private TMP_Text levelText;
        [SerializeField] private TMP_Text expFillText;
        [SerializeField] private Slider expFillBar;

        public void Start()
        {
            Init();
        }
        
        public void Init()
        {
            nameText.text = PlayerManager.Instance.playerData.name;
            levelText.text = PlayerManager.Instance.playerData.level.ToString();   
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using UnityEngine;

namespace _02_Scripts.UI
{
    public class MainUIManager : MonoBehaviour
    {
        [SerializeField]
        private GameObject BtnPanel;
        
        public void ShowBtn()
        {
            BtnPanel.SetActive(true);
        }

        public void HideBtn()
        {
            BtnPanel.SetActive(false);
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 

using UnityEngine;

namespace Utill
{
    public static class ComponentExtensions
    {
        /// TryGetComponent ??Ë´õÎ∂æÏ§à ËπÇ¬Ä?ÏÑèÎøâ ?Ï¢äÎñ¶?ÏÑéÎíó ?—ãÎùÅ
        public static bool AssignComponent<T>(this Component component, ref T target) where T : Component
        {
            if (component.TryGetComponent<T>(out var result))
            {
                target = result;
                return true;
            }
            Debug.Log(target.name +"ËπÇ¬Ä?ÏÑëÎ∏∑?Î±ÄÎøâ ?„ÖΩÎô£?ÏÑè??Îì¨Îï≤??");
            return false;
        }
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class InstantObject : MonoBehaviour
{
    //?ÏíñÍΩ¶?????Î±ÄÏ†ô ?ÏíìÏªô ?ÎåÑÏçë, ?Î®ÆÎ£û?Ïá∞Ï§à ÈçÆÍæ™ÏÜ¢?ÍπäÏÜï ?ÏÑéÎíó ?„ÖªÌàï?Ïï∫ÎìÉ

    [SerializeField] private float duration;
    private void OnEnable()
    {
        Invoke(nameof(Disable), duration);
    }

    private void Disable()
    {
        this.gameObject.SetActive(false);
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using UnityEngine;

public abstract class Singleton<T> : MonoBehaviour where T : MonoBehaviour
{
    private static T instance;
    private static object _lock = new object();
    private static bool applicationIsQuitting = false;

    public static T Instance
    {
        get
        {
            if (applicationIsQuitting)
            {
                Debug.LogWarning($"[Singleton] {typeof(T)} ?ÎåÄ? ÈÜ´ÎÇÖÏ¶∫?ÏÑèÎøÄ?Îì¨Îï≤?? ???Î™ÑÎí™?ÎåÅÎí™??Ë´õÏÑëÏÜö?ÏÑè? ?ÎîÜÎíø?ÎçàÎñé.");
                return null;
            }

            lock (_lock)
            {
                if (instance == null)
                {
                    instance = FindObjectOfType<T>();

                    if (FindObjectsOfType<T>().Length > 1)
                    {
                        Debug.LogError($"[Singleton] {typeof(T)} ?Î™ÑÎí™?ÎåÅÎí™Â™õ¬Ä 2Â™õ??ÎåÅÍ∏Ω Ë≠∞ÎåÅÏò±?‚ë∏Îï≤??");
                        return instance;
                    }

                    if (instance == null)
                    {
                        GameObject singletonObject = new GameObject($"{typeof(T)} (Singleton)");
                        instance = singletonObject.AddComponent<T>();
                        DontDestroyOnLoad(singletonObject);
                    }
                }

                return instance;
            }
        }
    }

    // ??‰ª•Î¨êÎÇ¨ Ë´õ‚ëπ?Áëú??Íæ™Î∏≥ ?Îì≠Îññ Êø°ÏíñÏ≠Ö
    protected virtual void Awake()
    {
        if (instance == null)
        {
            instance = this as T;
            DontDestroyOnLoad(gameObject);
        }
        else if (instance != this)
        {
            Destroy(gameObject); // ‰ª•Î¨êÎÇ¨ ?Î™ÑÎí™?ÎåÅÎí™ ?ÏíìÍµÖ
        }
    }

    
    protected virtual void OnApplicationQuit()
    {
        applicationIsQuitting = true;
    }

    protected virtual void OnDestroy()
    {
        if (instance == this)
            applicationIsQuitting = true;
    }
}
 
===== ?åÏùº: %~dpnxF ===== 
using System;
using System.Security.Cryptography;
using System.Text;

public class ConvertHash
{
    public static string StringToHash(string input)
    {
        using var sha = SHA256.Create();
        byte[] bytes = sha.ComputeHash(Encoding.UTF8.GetBytes(input));
        return BitConverter.ToString(bytes).Replace("-", "").ToLower();
    }
}
 
